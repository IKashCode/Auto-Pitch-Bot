using System;
using System.Collections.Concurrent;
using System.ComponentModel.DataAnnotations;
using System.Formats.Asn1;
using NotLoveBot.AdministrationPanelController;
using NotLoveBot.BotController;
using NotLoveBot.DataBaseProcess;
using NotLoveBot.Interface;
using NotLoveBot.Models;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace NotLoveBot.Program
{
    public class ConnectionController
    {
        public static TelegramBotClient? _telegramBotClient;
        // public static string Token = "7098079115:AAHyxAsO9XthZA79Gu4EY9I7WsJwsbnw3_k";
        public static string Token = "6820716903:AAEo7r-nGOLSJfNQfVZ-MMNERSvzEiq9a60";
        
        public static ConcurrentDictionary<string, ConnectionBotModel> TelegramBotClients = new ConcurrentDictionary<string, ConnectionBotModel>();

        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–µ–±–µ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é.
        public static Dictionary<long, List<int>> KeyboardMessages = new Dictionary<long, List<int>>();

        // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        private static IGetDataProcessing<ConnectionBotModel> _getBotsData = new GetBotsData();
        private static SetDataProcessing _setDataProcessing = new SetDataProcessing();
        private static GetBotNameByCode _getBotNameByCode = new GetBotNameByCode();

        // –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –º–µ–Ω—é.
        private static KeyboardMessagesController _keyboardMessagesController = new KeyboardMessagesController();

        private static BotsMenu _botsMenu = new BotsMenu();
        public static string[] commands = { "/start", "/menu", "/mybots", "/help" };

        public static async Task Main(string[] args)
        {
            // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —É–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–æ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
            List<ConnectionBotModel> connectionBotModels = await _getBotsData.GetList(null, null);
            
            foreach (var connectionBotModel in connectionBotModels)
            {
                // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö telegram bot.
                ConnectionController.TelegramBotClients[connectionBotModel.Token] = connectionBotModel;

                connectionBotModel.BotClient.OnMessage += (sender, messageEventArgs) => NotLoveBot.Program.Program.BotOnMessageReceived(sender, messageEventArgs, connectionBotModel.Token);
                connectionBotModel.BotClient.OnMessageEdited  += (sender, messageEventArgs) => NotLoveBot.Program.Program.BotOnMessageReceived(sender, messageEventArgs, connectionBotModel.Token);
                connectionBotModel.BotClient.StartReceiving();
            }

            _telegramBotClient = new TelegramBotClient(Token);
            
            _telegramBotClient.OnMessage += SuperBotOnMessageReceived;
            _telegramBotClient.OnMessageEdited += SuperBotOnMessageReceived;

            try {
                _telegramBotClient.StartReceiving();
                Console.WriteLine($"The system has been successfully launched, token: {Token}.");
            }
            catch (Exception exception){
                Console.WriteLine($"The system did not start successfully, exception: {exception}.");
            }
            
            Console.ReadLine();
            _telegramBotClient.StopReceiving();
        }

        private static async void SuperBotOnMessageReceived(object sender, MessageEventArgs messageEventArgs)
        {
            try
            {
                var message = messageEventArgs.Message;

                switch (message.Text)
                {
                    case "/start":
                        await _telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                        "üëã *–ü—Ä–∏–≤–µ—Ç!* –ü–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å *@AutoPitchBot* ‚Äî —ç—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏. –°–æ–∑–¥–∞–≤–∞–π—Ç–µ –∏ –¥–æ–±–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É –≤ *–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ!*\n\n‚öôÔ∏è –ß—Ç–æ–±—ã –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É */menu*. –ù–∞—á–Ω–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ —á–∞—Ç—ã —Å Auto Pitch Bot! üöÄ",
                        parseMode: ParseMode.Markdown);
                        break;
                    case "/menu":
                        await _keyboardMessagesController.DeleteKeyboardMessages(message.Chat.Id);
                        await _botsMenu.GetBotsMenu(_telegramBotClient, message, null);
                        break;
                    case "/mybots":
                        await _keyboardMessagesController.DeleteKeyboardMessages(message.Chat.Id);
                        CreatedBotController createdBotController = new CreatedBotController();
                        await createdBotController.BotParameters(_telegramBotClient, message, null);
                        break;
                    case "/help":
                            InlineKeyboardMarkup helpInlineKeyboardMarkup = new InlineKeyboardMarkup(new[] {
                                new[] { InlineKeyboardButton.WithUrl("üëΩ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Üí", $"https://t.me/AutoPitchBotSupport") },
                            });
                        await _telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                        $"*@AutoPitchBot ‚Äî —ç—Ç–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–æ—Ç–æ–≤*, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —á–∞—Ç–∞–º–∏. –í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å *–Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ* –±–æ—Ç–æ–≤. –ö—Ä–æ–º–µ —Ç–æ–≥–æ, —Å–µ—Ä–≤–∏—Å *–ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ—Å–ø–ª–∞—Ç–µ–Ω* –±–ª–∞–≥–æ–¥–∞—Ä—è —Ä–µ–∫–ª–∞–º–µ –≤ –∫–æ–Ω—Ü–µ —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n‚ùì*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?* –ü–æ–ª–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ ‚Äî https://telegra.ph/CHto-takoe-Auto-Pitch-Bot-09-14\n\nüéß *–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*\n‚óè _Telegram ‚Äî @AutoPitchBotSupport_\n‚óè _Email ‚Äî IKashCode@outlook.com_\n‚ùóÔ∏è *–ï—Å–ª–∏ –≤—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª–∏ –æ—à–∏–±–∫—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É!*\n\nüîî *Telegram –∫–∞–Ω–∞–ª —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏ AutoPitchBot ‚Äî @IKashCodeDev*",
                        replyMarkup: helpInlineKeyboardMarkup, parseMode: ParseMode.Markdown);
                        break;
                    default:
                        if (message.Text.Contains("/confirm"))
                        {
                            string administratorCode = message.Text.Substring(message.Text.IndexOf(' ', + 1)).Trim();
                            bool isAdministrator = await _setDataProcessing.ExistenceCheck("AdministratorCodes", "code", administratorCode);
                            if (isAdministrator == true)
                            {
                                string botName = await _getBotNameByCode.GetBotName(administratorCode);
                                if (botName != null)
                                {
                                    await _setDataProcessing.SetCreateRequest($"DELETE FROM AdministratorCodes WHERE code = @{administratorCode};", null, administratorCode);
                                    if (await _setDataProcessing.ExistenceCheck($"Administrators_{botName}", "id", message.From.Id.ToString()))
                                    {
                                        await _telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                                        $"‚ö†Ô∏è *–î–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.* –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ!",
                                        parseMode: ParseMode.Markdown);
                                        return;
                                    }

                                    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ username –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
                                    string username = message.From.Username;
                                    if (username == null)
                                        username = $"NoName_{message.From.Id}";

                                    // –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
                                    string[,] administratorsData = {
                                        { message.From.Id.ToString(), "moderator", username },
                                        { "channelName", "status", "username" }};
                                    await _setDataProcessing.SetCreateRequest($"INSERT INTO Administrators_{botName} (id, status, name) VALUES (@channelName, @status, @username);", administratorsData, null);

                                    await _telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                                    $"üîê *–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã @{botName}!* –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ *¬´‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤¬ª*.",
                                    parseMode: ParseMode.Markdown);
                                }
                            }
                            else
                            {
                                await _telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                                "‚ö†Ô∏è *–î–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!*\n‚óè –ï—Å–ª–∏ –≤—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–≤–µ–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–¥, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ [—Å–ª—É–∂–±–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏](https://t.me/AutoPitchBotSupport) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–æ–º–æ—â–∏.",
                                parseMode: ParseMode.Markdown);
                            }
                        }
                        break;
                }
            }
            catch (Exception exception) { Console.WriteLine(exception); }
        }
    }
}