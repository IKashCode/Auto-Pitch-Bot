using System;
using System.Collections.Concurrent;
using NotLoveBot.BotController;
using NotLoveBot.DataBaseProcess;
using NotLoveBot.Program;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace NotLoveBot.AdministrationPanelController
{
    public class AdministratorMenu
    {
        // –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –º–µ–Ω—é.
        private static KeyboardMessagesController _keyboardMessagesController = new KeyboardMessagesController();

        // –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        private static SetDataProcessing _setDataProcessing = new SetDataProcessing();

        // –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –ø–∞–µ–Ω–µ–ª–µ.
        public static ConcurrentDictionary<string, List<string>> ActiveAdministratorsId = new ConcurrentDictionary<string, List<string>>();

        // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        private static Dictionary<long, EventHandler<CallbackQueryEventArgs>> _usersCallbacks = new Dictionary<long, EventHandler<CallbackQueryEventArgs>>();

        public async Task GetAdministratorMenu(TelegramBotClient telegramBotClient, Message message, Message editMessage, string administratorStatus, string botName)
        {
            try
            {
            // –ú–µ–Ω—é –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
            InlineKeyboardMarkup adminInlineKeyboardMarkup = new InlineKeyboardMarkup(new[] {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚úÖ –§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫"),
                    InlineKeyboardButton.WithCallbackData("‚è±Ô∏è –¢–∞–π–º–∏–Ω–≥")
                },
                new[] { InlineKeyboardButton.WithCallbackData("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏") },
                new[] { InlineKeyboardButton.WithCallbackData("‚Üê –ù–∞–∑–∞–¥") }
            });

            // –î—Ä—É–≥–æ–π –≤–∏–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–≤–ª–∞–¥–µ–ª—å—Ü–∞).
            if (administratorStatus == "owner")
            {
                adminInlineKeyboardMarkup = new InlineKeyboardMarkup(new[] {
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚úÖ –§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫"),
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("‚úçÔ∏è –¢–µ–∫—Å—Ç"),
                        InlineKeyboardButton.WithCallbackData("‚è±Ô∏è –¢–∞–π–º–∏–Ω–≥"),
                    },
                    new[]
                    {
                        InlineKeyboardButton.WithCallbackData("üìã –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏"),
                        InlineKeyboardButton.WithCallbackData("üìú –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã")
                    },
                    new[] { InlineKeyboardButton.WithCallbackData("‚Üê –ù–∞–∑–∞–¥") }
                });
            }

            // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–Ω—é.
            Message administratorMenuPanel;

            if (editMessage == null)
            {
                administratorMenuPanel = await telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                $"‚öôÔ∏è *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã @{botName}*\n\n ‚óè –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é ‚Äî [–∑–¥–µ—Å—å](https://telegra.ph/CHto-takoe-Auto-Pitch-Bot-09-14).\n\n*‚á© –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.*",
                replyMarkup: adminInlineKeyboardMarkup, parseMode: ParseMode.Markdown);
            }
            else
            {
                administratorMenuPanel = await telegramBotClient.EditMessageTextAsync(editMessage.Chat.Id, editMessage.MessageId,
                $"‚öôÔ∏è *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã @{botName}*\n\n ‚óè –î–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º —ç—Ç–æ–π –ø–∞–Ω–µ–ª–∏ –ø–æ—Å–µ—Ç–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é ‚Äî [–∑–¥–µ—Å—å](https://telegra.ph/CHto-takoe-Auto-Pitch-Bot-09-14).\n\n*‚á© –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.*",
                replyMarkup: adminInlineKeyboardMarkup, parseMode: ParseMode.Markdown);
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–Ω—é.
            await _keyboardMessagesController.AddKeyboardMessages(administratorMenuPanel);
            
            EventHandler<CallbackQueryEventArgs> BotOnButtonClick = async (sender, callbackQueryEventArgs) =>
            {
                try {     
                var callbackQueryMessage = callbackQueryEventArgs.CallbackQuery;

                // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                if (callbackQueryMessage.From.Id != message.From.Id)
                    return;


                CreatedBotController createdBotController = new CreatedBotController();
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
                if (await _setDataProcessing.ExistenceCheck($"Administrators_{botName}", "id", message.From.Id.ToString()) == false)
                {
                    await createdBotController.BotParameters(telegramBotClient, message, administratorMenuPanel);

                    telegramBotClient.OnCallbackQuery -= _usersCallbacks[message.From.Id];
                    _usersCallbacks.Remove(message.From.Id);
                    return;
                }

                switch (callbackQueryMessage.Data)
                {
                    case "‚úÖ –§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫":
                        var connectionBotModel = ConnectionController.TelegramBotClients.Values.FirstOrDefault(bot => bot.BotName == botName);
                        bool enabledCheckMessages = Convert.ToBoolean(connectionBotModel.FilterStatus);

                        SwitchingSystemStatus switchingSystemStatus = new SwitchingSystemStatus();
                        await switchingSystemStatus.StatusController(telegramBotClient, message, administratorMenuPanel, enabledCheckMessages, "–§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫", administratorStatus, botName);
                        break;
                    case "‚úçÔ∏è –¢–µ–∫—Å—Ç":
                        MessageTextController messageTextController = new MessageTextController();
                        await messageTextController.SetMessageText(telegramBotClient, message, administratorMenuPanel, administratorStatus, botName);
                        break;
                    case "‚è±Ô∏è –¢–∞–π–º–∏–Ω–≥":
                        DelayController delayController = new DelayController();
                        await delayController.SetDelay(telegramBotClient, message, administratorMenuPanel, administratorStatus, botName);
                        break;
                    case "üìã –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–∏":
                        if (administratorMenuPanel != null)
                        {
                            // –£–¥–∞–ª–µ–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
                            await telegramBotClient.DeleteMessageAsync(administratorMenuPanel.Chat.Id, administratorMenuPanel.MessageId);

                            UnloadList unloadList = new UnloadList();
                            await unloadList.UnloadListSenders(telegramBotClient, message, "üìÖ –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ *DD.MM.YYYY*, –∑–∞ –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π, –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /today, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞ —Å–µ–≥–æ–¥–Ω—è.", administratorStatus, botName);
                        }
                        break;
                    case "üìú –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã":
                        AdministratorsController administratorsController = new AdministratorsController();
                        await administratorsController.UnloadListAdministrators(telegramBotClient, message, administratorMenuPanel, administratorStatus, botName);
                        break;
                    case "‚Üê –ù–∞–∑–∞–¥":
                        await createdBotController.BotParameters(telegramBotClient, message, administratorMenuPanel);
                        break;
                }

                // –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞.
                telegramBotClient.OnCallbackQuery -= _usersCallbacks[message.From.Id];
                _usersCallbacks.Remove(message.From.Id);
                } catch(Exception exception){ Console.WriteLine(exception); }
            };

            // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è.
            if (_usersCallbacks.ContainsKey(message.From.Id))
            {
                telegramBotClient.OnCallbackQuery -= _usersCallbacks[message.From.Id];
                _usersCallbacks[message.From.Id] = BotOnButtonClick;
            }
            else
                _usersCallbacks.Add(message.From.Id, BotOnButtonClick);
            telegramBotClient.OnCallbackQuery += BotOnButtonClick;
        }
        catch(Exception exception) { Console.WriteLine(exception); }
    }
    }
}