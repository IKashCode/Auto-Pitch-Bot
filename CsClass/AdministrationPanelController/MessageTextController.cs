using System;
using NotLoveBot.DataBaseProcess;
using NotLoveBot.Interface;
using NotLoveBot.Models;
using NotLoveBot.Program;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;

namespace NotLoveBot.AdministrationPanelController
{
    public class MessageTextController
    {
        // –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ —Å –º–µ–Ω—é.
        private static KeyboardMessagesController _keyboardMessagesController = new KeyboardMessagesController();
        
        // –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
        private IGetDataProcessing<ConnectionBotModel> _getBotsData = new GetBotsData();
        private SetDataProcessing _setDataProcessing = new SetDataProcessing();

        private static Dictionary<long, EventHandler<CallbackQueryEventArgs>> _usersCallbacks = new Dictionary<long, EventHandler<CallbackQueryEventArgs>>();

        // –ó–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –¥–ª–∏–Ω—É —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π.
        private int maximumLengthStart = 350, maximumLengthReplyMessage = 200;
        
        public async Task SetMessageText(TelegramBotClient telegramBotClient, Message message, Message editMessage, string administratorStatus, string botName)
        {
            try {
            List<ConnectionBotModel> connectionBotModels = await _getBotsData.GetList(botName, "botName");
            var connectionBotModel = connectionBotModels.FirstOrDefault();

            InlineKeyboardMarkup textInlineKeyboardMarkup = new InlineKeyboardMarkup(new[] {
                new[]
                {
                    InlineKeyboardButton.WithCallbackData("‚úèÔ∏è ‚Üí –æ—Ç–≤–µ—Ç—ã"),
                    InlineKeyboardButton.WithCallbackData("‚úèÔ∏è ‚Üí /start")
                },
                new[] { InlineKeyboardButton.WithCallbackData("‚Üê –ù–∞–∑–∞–¥") }
            });

            Message textControllerPanel;
            if (editMessage == null)
            {
                textControllerPanel = await telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                $"‚úâÔ∏è *–ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤:*\n\n{connectionBotModel.ReplyMessageText}\n\n*üöÄ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ¬´/start¬ª:*\n\n{connectionBotModel.StartMessageText}",
                replyMarkup: textInlineKeyboardMarkup, parseMode: ParseMode.Markdown);
            }
            else
            {
                textControllerPanel = await telegramBotClient.EditMessageTextAsync(editMessage.Chat.Id, editMessage.MessageId,
                $"‚úâÔ∏è *–ó–∞–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–æ–≤:*\n\n{connectionBotModel.ReplyMessageText}\n\n*üöÄ –û–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã ¬´/start¬ª:*\n\n{connectionBotModel.StartMessageText}",
                replyMarkup: textInlineKeyboardMarkup, parseMode: ParseMode.Markdown);
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –º–µ–Ω—é.
            await _keyboardMessagesController.AddKeyboardMessages(textControllerPanel);

            EventHandler<CallbackQueryEventArgs> BotOnButtonClick = async (sender, callbackQueryEventArgs) =>
            {
                var callbackQueryMessage = callbackQueryEventArgs.CallbackQuery;
                var telegramBotClient = (TelegramBotClient)sender;

                if (callbackQueryMessage.From.Id != message.From.Id)
                    return;

                if (callbackQueryMessage.Data == "‚úèÔ∏è ‚Üí –æ—Ç–≤–µ—Ç—ã" || callbackQueryMessage.Data == "‚úèÔ∏è ‚Üí /start")
                {
                    Message indicateDateMessage;
                    if (textControllerPanel == null)
                    {
                        indicateDateMessage = await telegramBotClient.SendTextMessageAsync(textControllerPanel.Chat.Id,
                        "üí¨ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π.*",
                        parseMode: ParseMode.Markdown);
                    }
                    else
                    {
                        indicateDateMessage = await telegramBotClient.EditMessageTextAsync(textControllerPanel.Chat.Id, textControllerPanel.MessageId,
                        "üí¨ *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π.*",
                        parseMode: ParseMode.Markdown);
                    }

                    telegramBotClient.OnMessage += BotOnMessageReceived;
                    async void BotOnMessageReceived(object sender, MessageEventArgs messageEventArgs)
                    {
                        try {
                        Message replyMessage = messageEventArgs.Message;
                        string dataMessage;

                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö.
                        if (replyMessage.Type != MessageType.Text)
                        {
                            await telegramBotClient.SendTextMessageAsync(message.Chat.Id, $"‚ö†Ô∏è *–§–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.", parseMode: ParseMode.Markdown);
                            telegramBotClient.OnMessage -= BotOnMessageReceived;
                            telegramBotClient.OnMessage += BotOnMessageReceived;
                            return;
                        }
                        else
                            dataMessage = replyMessage.Text;

                        if (replyMessage.From.Id != message.From.Id)
                            return;
                        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥.
                        foreach (string command in ConnectionController.commands)
                        {
                            if (dataMessage == command)
                            {
                                telegramBotClient.OnMessage -= BotOnMessageReceived;
                                return;
                            }
                        }

                        string tableName = null;
                        int maximumLength = 0;
                        switch (callbackQueryMessage.Data)
                        {
                            case "‚úèÔ∏è ‚Üí –æ—Ç–≤–µ—Ç—ã":
                                tableName = "replyMessageText";
                                maximumLength = maximumLengthReplyMessage;
                                break;
                            case "‚úèÔ∏è ‚Üí /start":
                                tableName = "startMessageText";
                                maximumLength = maximumLengthStart;
                                break;
                        }

                        if (dataMessage.Length < maximumLength)
                        {
                            object[,] textMessageData = { { dataMessage, botName }, { "messageText", "botName" } };
                            await _setDataProcessing.SetCreateRequest($"UPDATE Bots SET {tableName} = @messageText WHERE botName = @botName;", textMessageData, null);

                            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å–ø–∏—Å–∫–µ –¥–∞–Ω–Ω—ã—Ö telegram bot.
                            var connectionBotModel = ConnectionController.TelegramBotClients.Values.FirstOrDefault(bot => bot.BotName == botName);
                            var updateConnectionBotModel = new ConnectionBotModel
                            {
                                BotName = connectionBotModel.BotName,
                                Token = connectionBotModel.Token,
                                ChannelName = connectionBotModel.ChannelName,
                                ChannelId = connectionBotModel.ChannelId,
                                UserId = connectionBotModel.UserId,
                                BotClient = connectionBotModel.BotClient,
                                Delay = connectionBotModel.Delay,
                                ReplyMessageText = connectionBotModel.ReplyMessageText,
                                StartMessageText = connectionBotModel.StartMessageText,
                                FilterStatus = connectionBotModel.FilterStatus,
                            };

                            // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–ª–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ.
                            ConnectionController.TelegramBotClients.TryRemove(connectionBotModel.Token, out _);
                            ConnectionController.TelegramBotClients.TryAdd(updateConnectionBotModel.Token, updateConnectionBotModel);

                            await telegramBotClient.SendTextMessageAsync(message.Chat.Id, "üîÑ *–¢–µ–∫—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω!* –í –¥–∞–ª—å–Ω–µ–π—à–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–æ–≤—ã–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º.", parseMode: ParseMode.Markdown);
                            await SetMessageText(telegramBotClient, message, null, administratorStatus, botName);
                            telegramBotClient.OnMessage -= BotOnMessageReceived;
                        }
                        else
                        {
                            await telegramBotClient.SendTextMessageAsync(message.Chat.Id, $"‚ö†Ô∏è *–¢–µ–∫—Å—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å* `{maximumLength.ToString()}` *—Å–∏–º–≤–æ–ª–æ–≤!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç.", parseMode: ParseMode.Markdown);
                            telegramBotClient.OnMessage -= BotOnMessageReceived;
                            telegramBotClient.OnMessage += BotOnMessageReceived;
                        }
                    } catch (Exception exception) { Console.WriteLine(exception); }
                }
                }
                else
                {
                    AdministratorMenu administratorMenu = new AdministratorMenu();
                    await administratorMenu.GetAdministratorMenu(telegramBotClient, message, textControllerPanel, administratorStatus, botName);
                    telegramBotClient.OnCallbackQuery -= _usersCallbacks[message.From.Id];
                }
            };

            // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è.
            if (_usersCallbacks.ContainsKey(message.From.Id))
            {
                telegramBotClient.OnCallbackQuery -= _usersCallbacks[message.From.Id];
                _usersCallbacks[message.From.Id] = BotOnButtonClick;
            }
            else
                _usersCallbacks.Add(message.From.Id, BotOnButtonClick);

            telegramBotClient.OnCallbackQuery += BotOnButtonClick;
        } catch (Exception exception) { Console.WriteLine(exception); }
        }
    }
}