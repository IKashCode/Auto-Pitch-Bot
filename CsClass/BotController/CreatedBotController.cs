using System;
using NotLoveBot.DataBaseProcess;
using NotLoveBot.DataChecking;
using NotLoveBot.Interface;
using NotLoveBot.Models;
using NotLoveBot.Program;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using NotLoveBot.AdministrationPanelController;
using System.Text.RegularExpressions;
using NotLoveBot.CheckRules;

namespace NotLoveBot.BotController
{
    public class CreatedBotController
    {
        // –ö–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö.
        private IDataChecking _channelNameCheckig = new ChennelNameChecking();
        private SetDataProcessing _setDataProcessing = new SetDataProcessing();
        private static IGetDataProcessing<ConnectionBotModel> _getBotsData = new GetBotsData();
        private static IGetDataProcessing<AdministrationModel> _getAdministratorsData = new GetAdministratorsData();

        // –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞.
        private IDataChecking _tokenChecking = new TokenChecking();
        private CheckMessage _checkMessage = new CheckMessage();

        // –†–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –º–µ–Ω—é.
        private static AdministratorMenu _administratorMenu = new AdministratorMenu();
        private static BotsMenu _botsMenu = new BotsMenu();

        private static Dictionary<long, EventHandler<CallbackQueryEventArgs>> usersCallbacks = new Dictionary<long, EventHandler<CallbackQueryEventArgs>>();

        public async Task CreateBot(TelegramBotClient telegramBotClient, Message message, Message editMessage, string TokenMessageText)
        {
            try {
            InlineKeyboardMarkup tokenInlineKeyboardMarkup = new InlineKeyboardMarkup(new[] {
                new[] { InlineKeyboardButton.WithUrl("‚ùì –ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å bot?", "https://youtube.com/shorts/miiZ_wSaA0g?si=Mydch5NmpzsnOMwV") },
                new[] { InlineKeyboardButton.WithCallbackData("‚Üê –ù–∞–∑–∞–¥") }
            });

            Message tokenInstructionMessage = await telegramBotClient.EditMessageTextAsync(editMessage.Chat.Id, editMessage.MessageId,
            TokenMessageText,
            replyMarkup: tokenInlineKeyboardMarkup, parseMode: ParseMode.Markdown);

            EventHandler<CallbackQueryEventArgs> CreateBotOnButtonClick = async (sender, callbackQueryEventArgs) =>
            {
                var callbackQueryMessage = callbackQueryEventArgs.CallbackQuery;
                if (callbackQueryMessage.From.Id != message.From.Id)
                    return;

                if (callbackQueryMessage.Data == "‚Üê –ù–∞–∑–∞–¥")
                {
                    telegramBotClient.OnMessage -= BotOnMessageReceivedToken;
                    await _botsMenu.GetBotsMenu(telegramBotClient, message, tokenInstructionMessage);
                }
            };

            // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è.
            if (usersCallbacks.ContainsKey(message.From.Id))
            {
                telegramBotClient.OnCallbackQuery -= usersCallbacks[message.From.Id];
                usersCallbacks[message.From.Id] = CreateBotOnButtonClick;
            }
            else
                usersCallbacks.Add(message.From.Id, CreateBotOnButtonClick);

            telegramBotClient.OnCallbackQuery += CreateBotOnButtonClick;

            telegramBotClient.OnMessage += BotOnMessageReceivedToken;
            async void BotOnMessageReceivedToken(object sender, MessageEventArgs messageEventArgs)
            {
                Message tokenMessage = messageEventArgs.Message;
                string token = tokenMessage.Text;

                if (tokenMessage.From.Id != message.From.Id)
                    return;
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥.
                foreach (string command in ConnectionController.commands)
                {
                    if (token == command || tokenMessage.Type != MessageType.Text)
                    {
                        telegramBotClient.OnMessage -= BotOnMessageReceivedToken;
                        return;
                    }
                }
                
                if (!ConnectionController.TelegramBotClients.ContainsKey(token))
                {
                    if (await _tokenChecking.CheckingValidity(telegramBotClient, token) == true)
                    {
                        // –°–æ–∑–¥–∞–Ω–∏–µ Telegram –∫–ª–∏–µ–Ω—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—á–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.
                        TelegramBotClient connectTelegramBotClient = new TelegramBotClient(token);

                        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–∞–µ–º–æ–º –±–æ—Ç–µ.
                        var botInformation = await connectTelegramBotClient.GetMeAsync();

                        await telegramBotClient.SendTextMessageAsync(tokenMessage.Chat.Id,
                        "üëΩ –û—Ç–ª–∏—á–Ω–æ, *–±–æ—Ç –Ω–∞–π–¥–µ–Ω. –ü—Ä–∏—à–ª–∏—Ç–µ @username –∫–∞–Ω–∞–ª–∞*, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                        parseMode: ParseMode.Markdown);

                        // –£–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ.
                        await telegramBotClient.EditMessageReplyMarkupAsync(message.Chat.Id, tokenInstructionMessage.MessageId, replyMarkup: null);

                        telegramBotClient.OnMessage += BotOnMessageReceivedChannelName;
                        async void BotOnMessageReceivedChannelName(object sender, MessageEventArgs messageEventArgs)
                        {
                            Message channelNameMessage = messageEventArgs.Message;
                            string usernameChannel = channelNameMessage.Text;

                            if (channelNameMessage.From.Id != message.From.Id)
                                return;
                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–∞–Ω–¥.
                            foreach (string command in ConnectionController.commands)
                            {
                                if (usernameChannel == command || channelNameMessage.Type != MessageType.Text)
                                {
                                    telegramBotClient.OnMessage -= BotOnMessageReceivedToken;
                                    return;
                                }
                            }

                            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å—Å—ã–ª–∫–∏.
                            string pattern = @"https?:\/\/t\.me\/([a-zA-Z0-9_]+)";
                            Match match = Regex.Match(usernameChannel, pattern);
                            if (match.Success)
                                usernameChannel = $"@{match.Groups[1].Value}";

                            if (await _channelNameCheckig.CheckingValidity(telegramBotClient, usernameChannel) == true)
                            {  
                                var chatInformation = await telegramBotClient.GetChatAsync(usernameChannel);

                                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ username –∫–∞–Ω–∞–ª–∞.
                                string channelName = await ExistenceCheck(botInformation.Username.ToString(), "channelname");
                                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
                                string userName = await ExistenceCheck(channelNameMessage.From.Username.ToString(), "username");

                                // –ú–∞—Å—Å–∏–≤ SQLite –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è bot.
                                string[] SQLiteRequestsCreate = {
                                    $"CREATE TABLE UserMessageHistory_{botInformation.Username.ToString()} (number INTEGER PRIMARY KEY, user TEXT, message TEXT, id TEXT, date TEXT, type TEXT, status TEXT, firstName TEXT, lastName TEXT, time TEXT);",
                                    $"CREATE TABLE Administrators_{botInformation.Username.ToString()} (id TEXT, status TEXT, name TEXT);" };
                                string[] SQLiteRequestsAdd = {
                                    $"INSERT INTO Bots (botName, token, channelName, channelID, userID, delay, replyMessageText, filterStatus, startMessageText) VALUES (@username, @token, @channelName, @channelId, @userId, @delay, @replyMessageText, @filterStatus, @startMessageText);",
                                    $"INSERT INTO Administrators_{botInformation.Username.ToString()} (id, status, name) VALUES (@channelName, @status, @username);"
                                };
                                object[,] botsData = {
                                    { botInformation.Username.ToString(), token, channelName, chatInformation.Id.ToString(), message.From.Id.ToString(), 30, "‚ú® *–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!* ‚è≥ –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", 0, "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –∏–ª–∏ –∫–∞–Ω–∞–ª. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ! üöÄ" },
                                    { "username", "token", "channelName", "channelId", "userId", "delay", "replyMessageText", "filterStatus", "startMessageText" }
                                },
                                administratorsData = {
                                    { channelNameMessage.From.Id.ToString(), "owner", userName },
                                    { "channelName", "status", "username" }
                                };

                                try {
                                    foreach (string SQLiteRequestCreate in SQLiteRequestsCreate)
                                    {
                                        await _setDataProcessing.SetCreateRequest(SQLiteRequestCreate, null, null);
                                    }

                                    // –¶–∏–∫–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å—ã –≤–Ω–µ—Å–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
                                    for (int index = 0; index < SQLiteRequestsAdd.Length; index++)
                                    {
                                        switch (index)
                                        {
                                            case 0:
                                                await _setDataProcessing.SetCreateRequest(SQLiteRequestsAdd[index], botsData, null);
                                                break;
                                            case 1:
                                                await _setDataProcessing.SetCreateRequest(SQLiteRequestsAdd[index], administratorsData, null);
                                                break;
                                        }
                                    }
                                } catch(Exception exception) { Console.WriteLine(exception); }

                                // –ó–∞–ø—É—Å–∫ –Ω–æ–≤–≥–æ telegram bot.
                                try
                                {
                                    // –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.
                                    var connectionBotModel = new ConnectionBotModel
                                    {
                                        BotName = botInformation.Username.ToString(),
                                        Token = token,
                                        ChannelName = channelName,
                                        ChannelId = chatInformation.Id.ToString(),
                                        UserId = channelNameMessage.From.Id.ToString(),
                                        BotClient = connectTelegramBotClient,
                                        Delay = 30,
                                        FilterStatus = 0,
                                        ReplyMessageText = botsData[0, 6].ToString(),
                                        StartMessageText = botsData[0, 8].ToString()
                                    };

                                    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö telegram bot.
                                    ConnectionController.TelegramBotClients[token] = connectionBotModel;

                                    connectTelegramBotClient.OnMessage += (sender, messageEventArgs) => NotLoveBot.Program.Program.BotOnMessageReceived(sender, messageEventArgs, token);
                                    connectTelegramBotClient.OnMessageEdited  += (sender, messageEventArgs) => NotLoveBot.Program.Program.BotOnMessageReceived(sender, messageEventArgs, token);
                                    connectTelegramBotClient.StartReceiving();

                                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ.
                                    Console.WriteLine($"The user has successfully integrated the new telegram bot!\nData‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n‚Äî Token: {token.ToString()}\n‚Äî Channel: {channelName}\n‚Äî Username: @{userName}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n");

                                    await telegramBotClient.SendTextMessageAsync(channelNameMessage.Chat.Id,
                                    $"*–í–∞—à* [–±–æ—Ç](https://t.me/{connectionBotModel.BotName}) *—É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å @AutoPitchBot!* üéâ\n\n‚óè –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ —Ç–µ–ø–µ—Ä—å –º–æ–≥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É. –î–ª—è *–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è* –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª *¬´‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤¬ª*.",
                                    parseMode: ParseMode.Markdown);
                                }
                                catch (Exception exception) {
                                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–± –Ω–µ —É—Å–ø–µ—à–Ω–æ–º –∑–∞–ø—É—Å–∫–µ.
                                    Console.WriteLine($"The user has not successfully integrated the new telegram bot!\nException‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n{exception}\nData‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî\n‚Äî Token: {token.ToString()}\n‚Äî Channel: {channelName}\n‚Äî Username: {userName}\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî");
                                }

                                telegramBotClient.OnMessage -= BotOnMessageReceivedChannelName;
                            }
                            else
                            {
                                await telegramBotClient.SendTextMessageAsync(channelNameMessage.Chat.Id,
                                "‚ö†Ô∏è *–ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å @username –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞.",
                                parseMode: ParseMode.Markdown);

                                telegramBotClient.OnMessage -= BotOnMessageReceivedChannelName;
                                telegramBotClient.OnMessage += BotOnMessageReceivedChannelName;
                            }
                        }

                        telegramBotClient.OnMessage -= BotOnMessageReceivedToken;
                    }
                    else
                    {
                        await telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                        "‚ö†Ô∏è *–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        parseMode: ParseMode.Markdown);

                        telegramBotClient.OnMessage -= BotOnMessageReceivedToken;
                        telegramBotClient.OnMessage += BotOnMessageReceivedToken;
                    }
                }
                else
                {
                    await telegramBotClient.SendTextMessageAsync(tokenMessage.Chat.Id,
                    "‚ö†Ô∏è *–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –¥–∞–Ω–Ω—ã–π –±–æ—Ç —É–∂–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å @AutoPitchBot.* –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ *–≤–≤–µ—Å—Ç–∏ —Ç–æ–∫–µ–Ω* –µ—â–µ —Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ *–≤–µ—Ä–Ω–∏—Ç–µ—Å—å* –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    parseMode: ParseMode.Markdown);

                    telegramBotClient.OnMessage -= BotOnMessageReceivedToken;
                    telegramBotClient.OnMessage += BotOnMessageReceivedToken;
                }
            }
            } catch(Exception exception) { Console.WriteLine(exception); }
        }

        public async Task DeleteBot(TelegramBotClient telegramBotClient, Message message, Message editMessage)
        {
            try {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–æ—Ç–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            List<ConnectionBotModel> connectionBotModels = await _getBotsData.GetList(message.From.Id.ToString(), "userID");
            InlineKeyboardMarkup deleteBotsInlineKeyboardMarkup = await GetBotsKeyboard(message, connectionBotModels);
            Message botsDeleteMessage;
            
            if (connectionBotModels.Count == 0)
            {
                botsDeleteMessage = await telegramBotClient.EditMessageTextAsync(editMessage.Chat.Id, editMessage.MessageId,
                "ü§î *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤.* –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —É—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äî /menu",
                replyMarkup: deleteBotsInlineKeyboardMarkup, parseMode: ParseMode.Markdown);
            }
            else
            {
                botsDeleteMessage = await telegramBotClient.EditMessageTextAsync(editMessage.Chat.Id, editMessage.MessageId,
                "‚ùóÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.*\n–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç —Å–∏—Å—Ç–µ–º—ã –∏ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.",
                replyMarkup: deleteBotsInlineKeyboardMarkup, parseMode: ParseMode.Markdown);
            }

            EventHandler<CallbackQueryEventArgs> DeleteBotOnButtonClick = async (sender, callbackQueryEventArgs) =>
            {
                var callbackQueryMessage = callbackQueryEventArgs.CallbackQuery;
                if (callbackQueryMessage.From.Id != message.From.Id)
                    return;

                if (callbackQueryMessage.Data == "‚Üê –ù–∞–∑–∞–¥")
                {
                    await _botsMenu.GetBotsMenu(telegramBotClient, message, botsDeleteMessage);
                    return;
                }
                else
                {
                    try
                    {
                        // –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ telegram bots.
                        string deleteBotName = callbackQueryMessage.Data.Substring(3);
                        var connectionBotModel = ConnectionController.TelegramBotClients.Values.FirstOrDefault(bot => bot.BotName == deleteBotName);
                        ConnectionController.TelegramBotClients.TryRemove(connectionBotModel.Token, out _);

                        string[] SQLiteRequests = {
                            $"DELETE FROM Bots WHERE BotName = @{deleteBotName}",
                            $"DROP TABLE Administrators_{deleteBotName}",
                            $"DROP TABLE UserMessageHistory_{deleteBotName}"
                        };

                        foreach (var SQLiteRequest in SQLiteRequests)
                        { await _setDataProcessing.SetCreateRequest(SQLiteRequest, null, deleteBotName); }

                        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ bot.
                        connectionBotModel.BotClient.StopReceiving();

                        List<ConnectionBotModel> connectionBotModels = await _getBotsData.GetList(message.From.Id.ToString(), "userID");
                        InlineKeyboardMarkup deleteBotsInlineKeyboardMarkup = await GetBotsKeyboard(message, connectionBotModels);

                        await DeleteBot(telegramBotClient, message, botsDeleteMessage);
                    }
                    catch (Exception exception) { Console.WriteLine(exception); }
                }
            };
            
            // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è.
            if (usersCallbacks.ContainsKey(message.From.Id))
            {
                telegramBotClient.OnCallbackQuery -= usersCallbacks[message.From.Id];
                usersCallbacks[message.From.Id] = DeleteBotOnButtonClick;
            }
            else
                usersCallbacks.Add(message.From.Id, DeleteBotOnButtonClick);
                
            telegramBotClient.OnCallbackQuery += DeleteBotOnButtonClick;
        } catch(Exception exception) { Console.WriteLine(exception); }
        }

        public async Task BotParameters(TelegramBotClient telegramBotClient, Message message, Message editMessage)
        {
            try {
            List<ConnectionBotModel> connectionBotModels = await _getBotsData.GetList(null, null);
            var inlineKeyboardButton = new List<InlineKeyboardButton[]>();
            int inlineKeyboardLength = 0;

            foreach (var connectionBotModel in connectionBotModels)
            {
                // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ.
                List<AdministrationModel> administrationModels = await _getAdministratorsData.GetList(null, connectionBotModel.BotName);
                bool isAdministrator = await _setDataProcessing.ExistenceCheck($"Administrators_{connectionBotModel.BotName}", "id", message.From.Id.ToString());

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ.
                if (isAdministrator == true)
                {
                    inlineKeyboardLength++;
                    string status = "üòé";

                    foreach (var administrationModel in administrationModels)
                    {
                        // –°—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
                        if (administrationModel.Id == message.From.Id.ToString())
                        {
                            if (administrationModel.Status == "owner")
                                status = "üëë";

                            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
                            inlineKeyboardButton.Add(new[] { InlineKeyboardButton.WithCallbackData($"@{connectionBotModel.BotName} ‚Üí {status}") });
                        }
                    }
                }
            }
            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–æ—Ç–æ–≤.
            inlineKeyboardButton.Add(new[] { InlineKeyboardButton.WithCallbackData("‚Üê –ù–∞–∑–∞–¥") });
            InlineKeyboardMarkup botParametersInlineKeyboardMarkup = new InlineKeyboardMarkup(inlineKeyboardButton);

            Message botParametersMessage;

            if (editMessage == null)
            {
                if (inlineKeyboardLength == 0) {
                    botParametersMessage = await telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                    "ü§î *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤.* –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —É—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äî /menu",
                    replyMarkup: botParametersInlineKeyboardMarkup, parseMode: ParseMode.Markdown); }
                else {
                    botParametersMessage = await telegramBotClient.SendTextMessageAsync(message.Chat.Id,
                    "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*",
                    replyMarkup: botParametersInlineKeyboardMarkup, parseMode: ParseMode.Markdown); }
            }
            else
            {
                if (inlineKeyboardLength == 0) {
                    botParametersMessage = await telegramBotClient.EditMessageTextAsync(editMessage.Chat.Id, editMessage.MessageId,
                    "ü§î *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–æ—Ç–æ–≤.* –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, —É—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É ‚Äî /menu",
                    replyMarkup: botParametersInlineKeyboardMarkup, parseMode: ParseMode.Markdown); }
                else {
                    botParametersMessage = await telegramBotClient.EditMessageTextAsync(editMessage.Chat.Id, editMessage.MessageId,
                    "ü§ñ *–í—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*",
                    replyMarkup: botParametersInlineKeyboardMarkup, parseMode: ParseMode.Markdown); }
            }

            EventHandler<CallbackQueryEventArgs> DeleteBotOnButtonClick = async (sender, callbackQueryEventArgs) =>
            {
                var callbackQueryMessage = callbackQueryEventArgs.CallbackQuery;
                if (callbackQueryMessage.From.Id != message.From.Id)
                    return;

                if (callbackQueryMessage.Data == "‚Üê –ù–∞–∑–∞–¥")
                    await _botsMenu.GetBotsMenu(telegramBotClient, message, botParametersMessage);
                else
                {
                    string botName = callbackQueryMessage.Data.Substring(1);
                    botName = botName.Remove(botName.Length - 5);

                    string status = "moderator";
                    if (callbackQueryMessage.Data.Contains("üëë"))
                        status = "owner";

                    // –í—ã–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
                    await _administratorMenu.GetAdministratorMenu(telegramBotClient, message, botParametersMessage, status, botName);
                }

                // –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã.
                telegramBotClient.OnCallbackQuery -= usersCallbacks[message.From.Id];
                usersCallbacks.Remove(message.From.Id);
            };

            // –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω, —Ç–æ –æ–Ω —É–¥–∞–ª—è–µ—Ç—Å—è.
            if (usersCallbacks.ContainsKey(message.From.Id))
            {
                telegramBotClient.OnCallbackQuery -= usersCallbacks[message.From.Id];
                usersCallbacks[message.From.Id] = DeleteBotOnButtonClick;
            }
            else
                usersCallbacks.Add(message.From.Id, DeleteBotOnButtonClick);
                
            telegramBotClient.OnCallbackQuery += DeleteBotOnButtonClick;
        } catch(Exception exception) { Console.WriteLine(exception); }
        }

        private async Task<InlineKeyboardMarkup> GetBotsKeyboard(Message message, List<ConnectionBotModel> connectionBotModels)
        {
            // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è deleteBotsInlineKeyboardMarkup.
            var inlineKeyboardButton = new List<InlineKeyboardButton[]>();
            foreach (var connectionBotModel in connectionBotModels)
            { inlineKeyboardButton.Add(new[] { InlineKeyboardButton.WithCallbackData($"‚ùå @{connectionBotModel.BotName}") }); }
            inlineKeyboardButton.Add(new[] { InlineKeyboardButton.WithCallbackData("‚Üê –ù–∞–∑–∞–¥") });

            InlineKeyboardMarkup inlineKeyboardMarkup = new InlineKeyboardMarkup(inlineKeyboardButton);
            return inlineKeyboardMarkup;
        }

        private async Task<string> ExistenceCheck(string dataVerifiable, string dataName)
        {
            if (dataVerifiable != null)
                return dataVerifiable;

            return $"{dataName} –æ—Ç—Å—É—Ç—Å–≤—É–µ—Ç";
        }
    }
}