using System;
using System.Text;
using Telegram.Bot.Types;

namespace NotLoveBot.CheckRules
{
    public class CheckMessage
    {
        // –í—Å–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
        private string[] _forbiddenSymbols
        = {
            "–≤–∞—Å–∏–ª–µ–Ω–∫–æ", "–≤–æ—Å—Ç—Ä–æ–≤", "–±–∞—É–∫–æ–≤", "–≥—Ä–µ—à–Ω–æ–≤",
            "–∞–¥–º", "adm", "admin", "–∫–∞–Ω–∞–ª", "–≤–∞–∫—Å–∞–µ–Ω–µ–ª—é–±—è—Ç", "—Ç–≥–∫",
            "/", "http", "t.me",
            "üçî", "‚ùóÔ∏è",
            "Âçê", "Âçç",
        };

        private char[] _punctuationSymbols = 
        {
            '!', ' ', ',', '.', ':', ';', '?', '-', '_', '(', ')', '[', ']', '{', '}', '\'', '\"', '\\', '@', '#', '$', '%', '^', '&', '*', '+', '=', '<', '>', '|', '`', '~',
            '\t', '\n', '\r', '¬´', '¬ª', '‚Ä¶', '‚Äì', '‚Äî', '‚Ä¢', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',
            '¬°', '¬¢', '¬£', '¬§', '¬•', '¬¶', '¬ß', '¬®', '¬©', '¬™', '¬´', '¬¨', '¬Æ', '¬Ø', '¬∞', '¬±', '¬≤', '¬≥', '¬¥', '¬µ', '¬∂', '¬∑', '¬∏', '¬π', '¬∫', '¬ª', '¬º', '¬Ω', '¬æ', '¬ø', 
            '√Ä', '√Å', '√Ç', '√É', '√Ñ', '√Ö', '√Ü', '√á', '√à', '√â', '√ä', '√ã', '√å', '√ç', '√é', '√è', '√ê', '√ë', '√í', '√ì', '√î', '√ï', '√ñ', '√ó', '√ò', '√ô', '√ö', '√õ', '√ú', '√ù', '√û', '√ü',
            '√†', '√°', '√¢', '√£', '√§', '√•', '√¶', '√ß', '√®', '√©', '√™', '√´', '√¨', '√≠', '√Æ', '√Ø', '√∞', '√±', '√≤', '√≥', '√¥', '√µ', '√∂', '√∑', '√∏', '√π', '√∫', '√ª', '√º', '√Ω', '√æ', '√ø'
        };

        public async Task<string> CheckForbiddenSymbols(string message, bool enabled)
        {
            string checkResult = $"‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!* ‚è≥ –û–Ω–æ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ `30 —Å–µ–∫—É–Ω–¥`. üí¨ –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ, –≤—Å–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∞–Ω–æ–Ω–∏–º–Ω–æ!";

            if (enabled == true)
            {
                if (await CheckLength(message, 4) == false)
                {
                    checkResult = $"*üö´ –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–µ –º–µ–Ω–µ–µ* `4 —Å–∏–º–≤–æ–ª–æ–≤`. ‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ —Ç–µ–∫—Å—Ç–∞.";
                    return checkResult;
                }

                message = await GetSolidMessage(message);

                foreach (string forbiddenSymbol in _forbiddenSymbols)
                {
                    if (message.Contains(forbiddenSymbol))
                    {
                        checkResult = $"üö´ *–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –∏–∑-–∑–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ —Å—Å—ã–ª–æ–∫!*";
                        break;
                    }
                }
            }
            
            return checkResult;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.
        public async Task<string> GetSolidMessage(string message)
        {
            StringBuilder resultText = new StringBuilder();

            foreach (char symbol in message)
            {
                if (Array.IndexOf(_punctuationSymbols, symbol) == -1)
                    resultText.Append(symbol);
            }

            return resultText.ToString().ToLower();;
        }

        // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–ª–∏—á–∏—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤.
        public async Task<bool> CheckLength(string message, int minimum)
        {
            if (message.Length < minimum)
                return false;

            return true;
        }
    }
}